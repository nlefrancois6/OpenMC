import openmc
import openmc.model
import openmc_data_downloader as odd
from math import pi, sin, cos, sqrt
import numpy as np
import matplotlib.pyplot as plt

def build_model(ppm_boron):

	enrichment=12.0

	# Materials definitions

	fuel = openmc.Material(name='Fuel')
	fuel.add_element('U', 0.995, enrichment=enrichment)
	fuel.add_element('Er', 0.005)
	fuel.add_nuclide('O16', 2.0)
	fuel.set_density('g/cm3', 10.400)

	zircaloy = openmc.Material(name='Zircaloy')
	zircaloy.add_element('Zr', 0.99)
	zircaloy.add_element('Nb', 0.01)
	zircaloy.set_density('g/cm3', 8.59)

	wall = openmc.Material(name='Carrier Rod Material')
	wall.add_element('Zr', 0.975)
	wall.add_element('Nb', 0.025)
	wall.set_density('g/cm3', 8.59)

	helium = openmc.Material(name='Helium')
	helium.add_element('He', 1)
	helium.set_density('g/cm3', 0.178)

	#Add boron to helium as neutron poison
	helium.add_element('B',ppm_boron*1e-6)


	# Instantiate a Materials collection, download cross-section data, and export to xml
	materials_file = openmc.Materials([fuel, zircaloy, helium, wall])
	odd.just_in_time_library_generator(libraries='ENDFB-7.1-NNDC',materials=materials_file)


	# Geometry definitions for the fuel rod

	#Making the boundary planes for the sleeves
	sleeve_min_z = openmc.ZPlane(z0=-12)
	sleeve_max_z = openmc.ZPlane(z0=+12)

	# Create cylinders for the fuel and clad
	fuel_inner_radius = openmc.ZCylinder(r=0.55)
	fuel_outer_radius = openmc.ZCylinder(r=0.566)
	clad_inner_radius = openmc.ZCylinder(r=0.596)
	clad_outer_radius = openmc.ZCylinder(r=0.68)

	# Create a universe to encapsulate a fuel rod
	pin_cell_universe = openmc.Universe(name='Fuel Pin') 

	# Create fuel cell
	fuel_cell_top = openmc.Cell(name='Fuel')
	fuel_cell_top.fill = fuel
	fuel_cell_top.region = -fuel_inner_radius & +sleeve_max_z
	pin_cell_universe.add_cell(fuel_cell_top)

	# Create void space
	void_space_top = openmc.Cell(name='empty_space')
	void_space_top.fill = helium
	void_space_top.region = +fuel_inner_radius & -clad_inner_radius & +sleeve_max_z
	pin_cell_universe.add_cell(void_space_top)

	# Create a clad cell
	clad_cell_top = openmc.Cell(name='Clad')
	clad_cell_top.fill = zircaloy
	clad_cell_top.region = +clad_inner_radius & -clad_outer_radius & +sleeve_max_z
	pin_cell_universe.add_cell(clad_cell_top)

	# Create fuel cell
	fuel_cell_bot = openmc.Cell(name='Fuel')
	fuel_cell_bot.fill = fuel
	fuel_cell_bot.region = -fuel_inner_radius & -sleeve_min_z
	pin_cell_universe.add_cell(fuel_cell_bot)

	# Create void space
	void_space_bot = openmc.Cell(name='empty_space')
	void_space_bot.fill = helium
	void_space_bot.region = +fuel_inner_radius & -clad_inner_radius & -sleeve_min_z
	pin_cell_universe.add_cell(void_space_bot)

	# Create a clad cell
	clad_cell_bot = openmc.Cell(name='Clad')
	clad_cell_bot.fill = zircaloy
	clad_cell_bot.region = +clad_inner_radius & -clad_outer_radius & -sleeve_min_z
	pin_cell_universe.add_cell(clad_cell_bot)

	# Create an outside of pin cell
	moderator = openmc.Cell(name='Moderator')
	moderator.fill = helium
	moderator.region = +clad_outer_radius
	pin_cell_universe.add_cell(moderator)

	# Create a 'sleeve' cell that slices through the middle of the elongated element
	sleeve_cell = openmc.Cell(name='Sleeve')
	sleeve_cell.fill = helium
	sleeve_cell.region = -clad_outer_radius & +sleeve_min_z & -sleeve_max_z
	pin_cell_universe.add_cell(sleeve_cell)

	# Geometry definitions for the fuel rod

	rod_inner_radius = openmc.ZCylinder(r=0.75) 
	rod_outer_radius = openmc.ZCylinder(r=0.7625)

	rod_cell_universe = openmc.Universe(name='Carrier Rod')

	inner_rod = openmc.Cell(name='Inner Rod')
	inner_rod.fill = helium
	inner_rod.region = -rod_inner_radius
	rod_cell_universe.add_cell(inner_rod)

	outer_rod = openmc.Cell(name='Outer Rod')
	outer_rod.fill = wall
	outer_rod.region = +rod_inner_radius & -rod_outer_radius
	rod_cell_universe.add_cell(outer_rod)

	# Create a circular Lattice for the bundle

	element_min_z = openmc.ZPlane(z0=-364, boundary_type='reflective')
	element_max_z = openmc.ZPlane(z0=+364, boundary_type='reflective')
	carrier_min_z = openmc.ZPlane(z0=-400, boundary_type='reflective')
	carrier_max_z = openmc.ZPlane(z0=+600, boundary_type='reflective')

	circlat = openmc.Universe(name='Circular Lattice')

	channel = openmc.ZCylinder(r=4.5, boundary_type='reflective')

	channel_cell = openmc.Cell(name='Channel')
	channel_cell.fill = helium
	channel_cell.region = -channel & +rod_outer_radius & +element_min_z & -element_max_z

	#Calculations before finding pin placement
	r_channel = 4.0
	r_element = 0.68
	r_outer = r_channel-r_element

	padding = pi*r_outer/6-2*r_element
	r_inner = r_outer*cos(pi/12)-sqrt((r_element*2+padding)**2-(r_element+padding)**2)

	# Add the fuel pins into the channel

	num_in_rings = [6, 12]
	radii = [r_inner, r_outer]
	angles = [0, pi/12]

	for index in range(len(num_in_rings)):
	  elem_num = num_in_rings[index]
	  ring_radius = radii[index]
	  theta_0 = angles[index]
	  theta = 2*pi/elem_num
	  for element in range(elem_num):
	    x = ring_radius*cos(element*theta + theta_0)
	    y = ring_radius*sin(element*theta + theta_0)

	    pin_boundary = openmc.ZCylinder(x0=x, y0=y, r=r_element)
	    pin = openmc.Cell(fill=pin_cell_universe, region=-pin_boundary & +element_min_z & -element_max_z)
	    pin.translation = (x,y,0)
	    pin.id = (index+1)*100 + element
	    channel_cell.region &= ~pin.region
	    circlat.add_cell(pin)

	# Add the 3 Components of the Carrier Rod
	rod_bound = openmc.ZCylinder(r=0.7625, boundary_type='reflective')
	rod_channel_min = openmc.ZPlane(z0=-364)
	rod_channel_max = openmc.ZPlane(z0=+364)

	rod_above = openmc.Cell(fill=rod_cell_universe, region=-rod_bound & -carrier_max_z & +rod_channel_max)
	rod_mid = openmc.Cell(fill=rod_cell_universe, region=-rod_outer_radius & +rod_channel_min & -rod_channel_max)
	rod_below = openmc.Cell(fill=rod_cell_universe, region=-rod_bound & -rod_channel_min & +carrier_min_z)

	circlat.add_cell(rod_above)
	circlat.add_cell(rod_mid)
	circlat.add_cell(rod_below)
	circlat.add_cell(channel_cell)

	geometry = openmc.Geometry(circlat)
	
	#Instantiate a Settings object
	settings = openmc.Settings()
	
	#Set simulation parameters
	settings.batches = 300
	settings.inactive = 20
	settings.particles = 1000
	
	#Create uniform spatial source distribution over fissionable zones	
	bounds = [-3, -3, -2.4, 3, 3, 2.4]
	uniform_dist = openmc.stats.Box(bounds[:3], bounds[3:], only_fissionable=False) #only_fissionable != True due to lots of helium
	settings.source = openmc.Source(space=uniform_dist)
	
	model = openmc.model.Model(geometry, materials_file, settings)
	
	return model
	
# Perform the criticality search
crit_ppm, guesses, keffs = openmc.search_for_keff(build_model, bracket=[0.,50000.], tol=1e-2, print_iterations=True)

print('Critical Boron Concentration: {:4.0f} ppm'.format(crit_ppm))

plt.figure(figsize=(8, 4.5))
plt.title('Eigenvalue versus Boron Concentration')
# Create a scatter plot using the mean value of keff
plt.scatter(guesses, [keffs[i].nominal_value for i in range(len(keffs))])
plt.xlabel('Boron Concentration [ppm]')
plt.ylabel('Eigenvalue')
plt.show()


